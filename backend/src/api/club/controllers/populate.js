'use strict';

/**
 * Club population controller
 * Endpoint to populate clubs with initial data
 */

module.exports = {
  async populate(ctx) {
    try {
      console.log('Starting club population...');
      
      // Get existing leagues to map clubs to
      const leagues = await strapi.entityService.findMany('api::liga.liga', {
        populate: ['saison']
      });
      
      console.log('Found leagues:', leagues.map(l => l.name));
      
      // Find specific leagues by name
      const kreisliga = leagues.find(l => l.name.includes('Kreisliga Tauberbischofsheim'));
      const kreisklasseA = leagues.find(l => l.name.includes('Kreisklasse A Tauberbischofsheim'));
      const kreisklasseB = leagues.find(l => l.name.includes('Kreisklasse B Tauberbischofsheim'));
      
      console.log('League mappings:');
      console.log('- Kreisliga:', kreisliga?.name || 'NOT FOUND');
      console.log('- Kreisklasse A:', kreisklasseA?.name || 'NOT FOUND');
      console.log('- Kreisklasse B:', kreisklasseB?.name || 'NOT FOUND');
      
      const results = {
        viktoriaClubs: [],
        opponentClubs: [],
        errors: []
      };
      
      // Step 1: Create Viktoria clubs with team mappings
      console.log('\n=== Creating Viktoria clubs ===');
      
      const viktoriaClubs = [
        {
          name: "SV Viktoria Wertheim",
          kurz_name: "SV VIK",
          club_typ: "viktoria_verein",
          viktoria_team_mapping: "team_1",
          gruendungsjahr: 1952,
          vereinsfarben: "Gelb-Blau",
          heimstadion: "Viktoria-Stadion Wertheim",
          adresse: "MusterstraÃŸe 1, 97877 Wertheim",
          website: "https://sv-viktoria-wertheim.de",
          aktiv: true,
          ligen: kreisliga ? [kreisliga.id] : []
        },
        {
          name: "SV Viktoria Wertheim II",
          kurz_name: "SV VIK II",
          club_typ: "viktoria_verein", 
          viktoria_team_mapping: "team_2",
          gruendungsjahr: 1952,
          vereinsfarben: "Gelb-Blau",
          heimstadion: "Viktoria-Stadion Wertheim",
          adresse: "MusterstraÃŸe 1, 97877 Wertheim",
          website: "https://sv-viktoria-wertheim.de",
          aktiv: true,
          ligen: kreisklasseA ? [kreisklasseA.id] : []
        },
        {
          name: "SpG Vikt. Wertheim 3/GrÃ¼nenwort",
          kurz_name: "SpG VIK 3",
          club_typ: "viktoria_verein",
          viktoria_team_mapping: "team_3", 
          gruendungsjahr: 1952,
          vereinsfarben: "Gelb-Blau",
          heimstadion: "Viktoria-Stadion Wertheim",
          adresse: "MusterstraÃŸe 1, 97877 Wertheim",
          website: "https://sv-viktoria-wertheim.de",
          aktiv: true,
          ligen: kreisklasseB ? [kreisklasseB.id] : []
        }
      ];
      
      for (const clubData of viktoriaClubs) {
        try {
          // Check if club already exists
          const existing = await strapi.entityService.findMany('api::club.club', {
            filters: { name: clubData.name }
          });
          
          if (existing.length > 0) {
            console.log(`âœ“ Club "${clubData.name}" already exists, skipping...`);
            results.viktoriaClubs.push({ name: clubData.name, status: 'exists' });
            continue;
          }
          
          const club = await strapi.entityService.create('api::club.club', {
            data: clubData
          });
          
          console.log(`âœ“ Created Viktoria club: ${club.name} (${club.viktoria_team_mapping})`);
          results.viktoriaClubs.push({ name: club.name, status: 'created', mapping: club.viktoria_team_mapping });
        } catch (error) {
          console.error(`âœ— Failed to create club "${clubData.name}":`, error.message);
          results.errors.push(`Failed to create ${clubData.name}: ${error.message}`);
        }
      }
      
      // Step 2: Create opponent clubs for each league
      console.log('\n=== Creating opponent clubs ===');
      
      // Kreisliga Tauberbischofsheim opponents (~16 clubs)
      const kreisligaOpponents = [
        "VfR Gerlachsheim",
        "TSV Jahn Kreuzwertheim", 
        "SV Eintracht Freudenberg",
        "FC Hundheim-Steinbach",
        "TSV Assamstadt",
        "SV Zimmern",
        "TSV Tauberbischofsheim",
        "SG KÃ¼lsheim",
        "FC GrÃ¼nsfeld",
        "SV Uissigheim",
        "TSV Reicholzheim",
        "SV Nassig",
        "FC KÃ¶nigshofen",
        "SV Distelhausen",
        "TSV Werbach",
        "SG Impfingen"
      ];
      
      // Kreisklasse A Tauberbischofsheim opponents (~14 clubs)
      const kreisklasseAOpponents = [
        "TSV UnterschÃ¼pf",
        "SV Oberlauda",
        "FC Beckstein",
        "TSV Lauda",
        "SV Sachsenflur",
        "FC Dittwar",
        "SG KÃ¶nigheim",
        "TSV Gerlachsheim II",
        "SV Oberbalbach",
        "FC KÃ¼lsheim II",
        "TSV Tauberbischofsheim II",
        "SV Wittighausen",
        "FC GrÃ¼nsfeld II",
        "SG Messelhausen"
      ];
      
      // Kreisklasse B Tauberbischofsheim opponents (~12 clubs)
      const kreisklasseBOpponents = [
        "FC Hundheim-Steinbach 2",
        "SV Zimmern II",
        "TSV Assamstadt II",
        "SV Eintracht Freudenberg II",
        "FC Beckstein II",
        "SV Oberlauda II",
        "TSV UnterschÃ¼pf II",
        "SG KÃ¶nigheim II",
        "SV Sachsenflur II",
        "FC Dittwar II",
        "TSV Lauda II",
        "SV Oberbalbach II"
      ];
      
      // Create opponent clubs for each league
      const opponentData = [
        { clubs: kreisligaOpponents, liga: kreisliga, ligaName: 'Kreisliga' },
        { clubs: kreisklasseAOpponents, liga: kreisklasseA, ligaName: 'Kreisklasse A' },
        { clubs: kreisklasseBOpponents, liga: kreisklasseB, ligaName: 'Kreisklasse B' }
      ];
      
      for (const { clubs, liga, ligaName } of opponentData) {
        if (!liga) {
          console.log(`âš  Skipping ${ligaName} - league not found`);
          results.errors.push(`League not found: ${ligaName}`);
          continue;
        }
        
        console.log(`\nCreating ${clubs.length} clubs for ${ligaName}:`);
        
        for (const clubName of clubs) {
          try {
            // Check if club already exists
            const existing = await strapi.entityService.findMany('api::club.club', {
              filters: { name: clubName }
            });
            
            if (existing.length > 0) {
              console.log(`  âœ“ Club "${clubName}" already exists, skipping...`);
              results.opponentClubs.push({ name: clubName, liga: ligaName, status: 'exists' });
              continue;
            }
            
            const club = await strapi.entityService.create('api::club.club', {
              data: {
                name: clubName,
                kurz_name: clubName.length > 20 ? clubName.substring(0, 17) + '...' : clubName,
                club_typ: "gegner_verein",
                aktiv: true,
                ligen: [liga.id]
              }
            });
            
            console.log(`  âœ“ Created: ${club.name}`);
            results.opponentClubs.push({ name: club.name, liga: ligaName, status: 'created' });
          } catch (error) {
            console.error(`  âœ— Failed to create club "${clubName}":`, error.message);
            results.errors.push(`Failed to create ${clubName}: ${error.message}`);
          }
        }
      }
      
      // Step 3: Validate club-liga relationships
      console.log('\n=== Validating club-liga relationships ===');
      
      const allClubs = await strapi.entityService.findMany('api::club.club', {
        populate: ['ligen']
      });
      
      console.log(`Total clubs created: ${allClubs.length}`);
      
      const viktoriaClubsCount = allClubs.filter(c => c.club_typ === 'viktoria_verein').length;
      const opponentClubsCount = allClubs.filter(c => c.club_typ === 'gegner_verein').length;
      
      console.log(`- Viktoria clubs: ${viktoriaClubsCount}`);
      console.log(`- Opponent clubs: ${opponentClubsCount}`);
      
      // Validate each club has correct league assignments
      let validationErrors = 0;
      const validationResults = [];
      
      for (const club of allClubs) {
        if (!club.ligen || club.ligen.length === 0) {
          console.error(`âœ— Club "${club.name}" has no league assignments`);
          validationErrors++;
          validationResults.push({ name: club.name, status: 'error', message: 'No league assignments' });
        } else {
          console.log(`âœ“ Club "${club.name}" assigned to ${club.ligen.length} league(s)`);
          validationResults.push({ name: club.name, status: 'valid', leagues: club.ligen.length });
        }
      }
      
      const summary = {
        totalClubs: allClubs.length,
        viktoriaClubs: viktoriaClubsCount,
        opponentClubs: opponentClubsCount,
        validationErrors,
        success: validationErrors === 0
      };
      
      if (validationErrors === 0) {
        console.log('\nðŸŽ‰ All clubs successfully created and validated!');
      } else {
        console.log(`\nâš  Completed with ${validationErrors} validation errors`);
      }
      
      ctx.body = {
        success: true,
        message: 'Club population completed',
        summary,
        results,
        validation: validationResults
      };
      
    } catch (error) {
      console.error('Error during club population:', error);
      ctx.body = {
        success: false,
        message: 'Club population failed',
        error: error.message
      };
      ctx.status = 500;
    }
  }
};